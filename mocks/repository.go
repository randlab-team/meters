// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/randlab-team/meters/repository (interfaces: Meters)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/randlab-team/meters/models"
)

// MockMeters is a mock of Meters interface.
type MockMeters struct {
	ctrl     *gomock.Controller
	recorder *MockMetersMockRecorder
}

// MockMetersMockRecorder is the mock recorder for MockMeters.
type MockMetersMockRecorder struct {
	mock *MockMeters
}

// NewMockMeters creates a new mock instance.
func NewMockMeters(ctrl *gomock.Controller) *MockMeters {
	mock := &MockMeters{ctrl: ctrl}
	mock.recorder = &MockMetersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeters) EXPECT() *MockMetersMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockMeters) GetAll() ([]models.MeterLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.MeterLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetersMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMeters)(nil).GetAll))
}

// Save mocks base method.
func (m *MockMeters) Save(arg0 models.MeterLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetersMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMeters)(nil).Save), arg0)
}
